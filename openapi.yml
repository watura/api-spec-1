openapi: 3.1.1
info:
  title: Pnut.io API
  description: |
    The official API for pnut.io - a social platform.
    For more information, visit https://docs.pnut.io
  version: 1.3.0
servers:
  - url: https://api.pnut.io/v1
    description: Production server
  - url: https://api.pnut.io/v0
    description: Legacy server
  - url: https://api.pnut-api-1.org/v1
    description: Backup server

paths:
  # Authentication endpoints are defined in authentication/authentication.yml
  /oauth/authenticate:
    $ref: 'authentication/authentication.yml#/paths/~1oauth~1authenticate'
  /oauth/access_token:
    $ref: 'authentication/authentication.yml#/paths/~1oauth~1access_token'
  /token:
    $ref: 'resources/token.yml#/paths/~1token'
  
  # App Streams endpoints
  /streams:
    $ref: 'how-to/app-streams.yml#/paths/~1streams'
  /streams/{key}:
    $ref: 'how-to/app-streams.yml#/paths/~1streams~1{key}'
  /streams/{key}/test:
    $ref: 'how-to/app-streams.yml#/paths/~1streams~1{key}~1test'
  
  # Client endpoints
  /users/{user_id}/clients:
    $ref: 'resources/clients.yml#/paths/~1users~1{user_id}~1clients'
  /clients/{client_id}:
    $ref: 'resources/clients.yml#/paths/~1clients~1{client_id}'
  
  # Stream Marker endpoints
  /markers:
    $ref: 'resources/stream-marker.yml#/paths/~1markers'
  
  # User Streams endpoints
  /users/me/posts:
    $ref: 'how-to/user-streams.yml#/paths/~1users~1me~1posts'
  /users/me/mentions:
    $ref: 'how-to/user-streams.yml#/paths/~1users~1me~1mentions'
  /posts/{post_id}/thread:
    $ref: 'how-to/user-streams.yml#/paths/~1posts~1{post_id}~1thread'
  /posts/streams/me:
    $ref: 'how-to/user-streams.yml#/paths/~1posts~1streams~1me'
  /posts/streams/unified:
    $ref: 'how-to/user-streams.yml#/paths/~1posts~1streams~1unified'
  /users/me/following:
    $ref: 'how-to/user-streams.yml#/paths/~1users~1me~1following'
  /users/me/followers:
    $ref: 'how-to/user-streams.yml#/paths/~1users~1me~1followers'
  /channels/{channel_id}/messages:
    $ref: 'how-to/user-streams.yml#/paths/~1channels~1{channel_id}~1messages'
  /channels:
    $ref: 'how-to/user-streams.yml#/paths/~1channels'
  /channels/{channel_id}/subscribers:
    $ref: 'how-to/user-streams.yml#/paths/~1channels~1{channel_id}~1subscribers'
  /channels/{channel_id}/presence:
    $ref: 'how-to/user-streams.yml#/paths/~1channels~1{channel_id}~1presence'
  /users/me/files:
    $ref: 'how-to/user-streams.yml#/paths/~1users~1me~1files'
  /presence:
    $ref: 'how-to/user-streams.yml#/paths/~1presence'

components:
  # Security schemes from authentication.yml
  securitySchemes:
    OAuth2:
      type: oauth2
      description: OAuth 2.0 authentication
      flows:
        authorizationCode:
          authorizationUrl: https://api.pnut.io/v1/oauth/authenticate
          tokenUrl: https://api.pnut.io/v1/oauth/access_token
          scopes:
            basic: Basic access to account information
            email: Access to view the account email address
            write_post: Create and edit posts
            follow: Follow and unfollow users
            update_profile: Update profile information
            presence: Access to user presence information
            messages: Access to private messages
            files: Access to file management
    AppToken:
      type: apiKey
      description: App access token for application-only authentication
      name: Authorization
      in: header
    UserToken:
      type: apiKey
      description: User access token for user-specific operations
      name: Authorization
      in: header

  # Common parameters
  parameters:
    since_id:
      name: since_id
      in: query
      description: Only return objects with IDs higher than this ID
      schema:
        type: string
    before_id:
      name: before_id
      in: query
      description: Only return objects with IDs lower than this ID
      schema:
        type: string
    count:
      name: count
      in: query
      description: Number of objects to return (1-200 for newest, -200 to -1 for oldest)
      schema:
        type: integer
        minimum: -200
        maximum: 200
        default: 20

  # Common schemas
  schemas:
    # Response envelope schema imported from implementation.yml
    ResponseEnvelope:
      type: object
      required:
        - meta
      properties:
        data:
          description: The actual response data, may be an object or array of objects
          oneOf:
            - type: object
            - type: array
            - type: string
        meta:
          type: object
          required:
            - code
          properties:
            code:
              type: integer
              description: HTTP status code
            more:
              type: boolean
              description: Whether there are more objects available
            max_id:
              type: string
              description: Highest object ID in the current response
            min_id:
              type: string
              description: Lowest object ID in the current response

    # Error response schema
    ErrorResponse:
      type: object
      required:
        - meta
      properties:
        meta:
          type: object
          required:
            - code
            - error_message
          properties:
            code:
              type: integer
              description: HTTP status code
            error_message:
              type: string
              description: Description of the error
            error_id:
              type: string
              description: Uniquely-identifying error ID for support

  # Common responses
  responses:
    BadRequest:
      description: The request was malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Authentication is required or has failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: The authenticated user doesn't have permission
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

# Global security definitions
security:
  - OAuth2: []
  - AppToken: []
  - UserToken: []
