openapi: 3.0.3
info:
  title: Pnut.io API
  description: |
    The official API for pnut.io - a social platform.
    For more information, visit https://docs.pnut.io
  version: 1.3.0
servers:
  - url: https://api.pnut.io/v1
    description: Production server
  - url: https://api.pnut.io/v0
    description: Legacy server
  - url: https://api.pnut-api-1.org/v1
    description: Backup server

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: OAuth 2.0 authentication for Pnut.io API
      flows:
        authorizationCode:
          authorizationUrl: https://pnut.io/oauth/authenticate
          tokenUrl: https://api.pnut.io/v1/oauth/access_token
          scopes:
            basic: See basic information about you
            email: Access your email address
            files: Manage your files
            follow: Add and remove follows, mutes, and blocks for you
            messages: Send and receive public and private messages
            public_messages: Send and receive public messages
            polls: Manage your polls
            presence: Update your global presence
            stream: Read your post streams
            update_profile: Update your name and other profile information
            write_post: Create and interact with your posts
            files:core_audio: Access to all files with kind audio
            files:core_image: Access to all files with kind image
        implicit:
          authorizationUrl: https://pnut.io/oauth/authenticate
          scopes:
            basic: See basic information about you
            email: Access your email address
            files: Manage your files
            follow: Add and remove follows, mutes, and blocks for you
            messages: Send and receive public and private messages
            public_messages: Send and receive public messages
            polls: Manage your polls
            presence: Update your global presence
            stream: Read your post streams
            update_profile: Update your name and other profile information
            write_post: Create and interact with your posts
            files:core_audio: Access to all files with kind audio
            files:core_image: Access to all files with kind image
        password:
          tokenUrl: https://api.pnut.io/v1/oauth/access_token
          scopes:
            basic: See basic information about you
            files: Manage your files
            follow: Add and remove follows, mutes, and blocks for you
            messages: Send and receive public and private messages
            public_messages: Send and receive public messages
            polls: Manage your polls
            presence: Update your global presence
            stream: Read your post streams
            update_profile: Update your name and other profile information
            write_post: Create and interact with your posts
            files:core_audio: Access to all files with kind audio
            files:core_image: Access to all files with kind image
        clientCredentials:
          tokenUrl: https://api.pnut.io/v1/oauth/access_token
          scopes:
            app: Access on behalf of the application

  parameters:
    # Common pagination parameters
    SinceId:
      name: since_id
      in: query
      description: Return objects with IDs greater than this value
      schema:
        type: string
    BeforeId:
      name: before_id
      in: query
      description: Return objects with IDs less than this value
      schema:
        type: string
    Count:
      name: count
      in: query
      description: Number of objects to return (1-200 or -200 to -1). Positive returns newest, negative returns oldest.
      schema:
        type: integer
        minimum: -200
        maximum: 200
        default: 20

    # Common inclusion parameters
    IncludeRaw:
      name: include_raw
      in: query
      description: Include raw data in response
      schema:
        type: integer
        enum: [0, 1]
        default: 0
    IncludeUserRaw:
      name: include_user_raw
      in: query
      description: Include user raw data in response
      schema:
        type: integer
        enum: [0, 1]
        default: 0
    IncludePostRaw:
      name: include_post_raw
      in: query
      description: Include post raw data in response
      schema:
        type: integer
        enum: [0, 1]
        default: 0
    IncludeChannelRaw:
      name: include_channel_raw
      in: query
      description: Include channel raw data in response
      schema:
        type: integer
        enum: [0, 1]
        default: 0
    IncludeMessageRaw:
      name: include_message_raw
      in: query
      description: Include message raw data in response
      schema:
        type: integer
        enum: [0, 1]
        default: 0
    IncludeFileRaw:
      name: include_file_raw
      in: query
      description: Include file raw data in response
      schema:
        type: integer
        enum: [0, 1]
        default: 0
    IncludePollRaw:
      name: include_poll_raw
      in: query
      description: Include poll raw data in response
      schema:
        type: integer
        enum: [0, 1]
        default: 0
    IncludeMarker:
      name: include_marker
      in: query
      description: Include stream marker in response
      schema:
        type: integer
        enum: [0, 1]
        default: 0
    IncludeBookmarkedBy:
      name: include_bookmarked_by
      in: query
      description: Include users who bookmarked the post
      schema:
        type: integer
        enum: [0, 1]
        default: 0
    IncludeRepostedBy:
      name: include_reposted_by
      in: query
      description: Include users who reposted the post
      schema:
        type: integer
        enum: [0, 1]
        default: 0
    IncludeHtml:
      name: include_html
      in: query
      description: Include HTML content in response
      schema:
        type: integer
        enum: [0, 1]
        default: 1

  schemas:
    # Authentication schemas
    AuthorizationCodeRequest:
      type: object
      required:
        - client_id
        - client_secret
        - code
        - redirect_uri
        - grant_type
      properties:
        client_id:
          type: string
          description: Client ID of the application
        client_secret:
          type: string
          description: Client secret of the application
        code:
          type: string
          description: Authorization code received from /oauth/authenticate
        redirect_uri:
          type: string
          description: Redirect URI used in the authorization request
        grant_type:
          type: string
          enum: [authorization_code]
          description: Must be 'authorization_code'

    PasswordFlowRequest:
      type: object
      required:
        - client_id
        - password_grant_secret
        - username
        - password
        - grant_type
        - scope
      properties:
        client_id:
          type: string
          description: Client ID of the application
        password_grant_secret:
          type: string
          description: Password grant secret (stand-in for client secret)
        username:
          type: string
          description: Username or email address of the user
        password:
          type: string
          description: Account password or one-time use password
        grant_type:
          type: string
          enum: [password]
          description: Must be 'password'
        scope:
          type: string
          description: Comma-delimited list of scopes to authorize

    ClientCredentialsRequest:
      type: object
      required:
        - client_id
        - client_secret
        - grant_type
      properties:
        client_id:
          type: string
          description: Client ID of the application
        client_secret:
          type: string
          description: Client secret of the application
        grant_type:
          type: string
          enum: [client_credentials]
          description: Must be 'client_credentials'

    AccessTokenResponse:
      type: object
      required:
        - access_token
        - token
      properties:
        access_token:
          type: string
          description: The access token to use for API requests
        token:
          type: object
          description: Token object with additional information
        user_id:
          type: string
          description: ID of the authenticated user (not included for app tokens)
        username:
          type: string
          description: Username of the authenticated user (not included for app tokens)

    # Response envelope
    ResponseEnvelope:
      type: object
      required:
        - meta
      properties:
        data:
          oneOf:
            - type: object
              description: Single object response
            - type: array
              description: List of objects response
        meta:
          $ref: '#/components/schemas/Meta'

    Meta:
      type: object
      required:
        - code
      properties:
        code:
          type: integer
          description: HTTP status code
        more:
          type: boolean
          description: Whether there are more objects available
        max_id:
          type: string
          description: Maximum ID in the current set of objects
        min_id:
          type: string
          description: Minimum ID in the current set of objects
        marker:
          $ref: '#/components/schemas/StreamMarker'
        error_message:
          type: string
          description: Error message if the request failed
        error_id:
          type: string
          description: Unique error identifier for support
        subscription_id:
          type: string
          description: ID for user stream subscription

    # Error response
    ErrorResponse:
      type: object
      required:
        - meta
      properties:
        meta:
          type: object
          required:
            - code
            - error_message
          properties:
            code:
              type: integer
              description: HTTP status code
            error_message:
              type: string
              description: Error message
            error_id:
              type: string
              description: Unique error identifier for support
            retry_in:
              type: integer
              description: Seconds to wait before retrying (for rate limits)

    # Stream marker
    StreamMarker:
      type: object
      properties:
        id:
          type: string
          description: ID of the marker
        name:
          type: string
          description: Name of the marker (e.g. 'global')
        last_read_id:
          type: string
          description: ID of the last read item
        percentage:
          type: string
          description: Percentage of items read
        updated_at:
          type: string
          format: date-time
          description: When the marker was last updated
        version:
          type: string
          description: Version of the marker

    # Content entities
    Entity:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkEntity'
        mentions:
          type: array
          items:
            $ref: '#/components/schemas/MentionEntity'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagEntity'

    LinkEntity:
      type: object
      properties:
        amended_len:
          type: integer
          description: Length of the text with domain appended (markdown links only)
        len:
          type: integer
          description: Length of the text
        pos:
          type: integer
          description: Position of text within the string
        text:
          type: string
          description: The anchor text
        title:
          type: string
          description: Title of the URL (markdown links with titles only)
        url:
          type: string
          description: The URL with protocol added if not specified

    MentionEntity:
      type: object
      properties:
        id:
          type: string
          description: User ID
        is_copy:
          type: boolean
          description: If the mention is a copy mention (follows a slash or another mention)
        is_leading:
          type: boolean
          description: If the mention comes before any other text in the string
        len:
          type: integer
          description: Length of the mention
        pos:
          type: integer
          description: Position of the mention within the string
        text:
          type: string
          description: Username without the @ symbol

    TagEntity:
      type: object
      properties:
        len:
          type: integer
          description: Length of the tag
        pos:
          type: integer
          description: Position of the tag within the string
        text:
          type: string
          description: The tag without the # symbol

    Content:
      type: object
      properties:
        entities:
          $ref: '#/components/schemas/Entity'
        html:
          type: string
          description: HTML rendered version of the text
        text:
          type: string
          description: Plain text content

    # Raw data
    RawData:
      type: object
      additionalProperties:
        type: array
        items:
          type: object
          additionalProperties: true
      description: Arbitrary data attached to objects with specified types

    # User schemas
    User:
      type: object
      properties:
        id:
          type: string
          description: Primary identifier for the user
        username:
          type: string
          description: Username of the user
        name:
          type: string
          description: User-supplied name
        content:
          type: object
          properties:
            avatar_image:
              type: object
              properties:
                is_default:
                  type: boolean
                  description: Whether the avatar is the default identicon
                height:
                  type: integer
                  description: Original height of the image
                url:
                  type: string
                  description: URL linking to the avatar image
                width:
                  type: integer
                  description: Original width of the image
            cover_image:
              type: object
              properties:
                is_default:
                  type: boolean
                  description: Whether the cover image is the default
                height:
                  type: integer
                  description: Original height of the image
                url:
                  type: string
                  description: URL linking to the cover image
                width:
                  type: integer
                  description: Original width of the image
            entities:
              type: object
              description: Rich text information for this user
            html:
              type: string
              description: Server-generated annotated HTML rendering of user text
            markdown_text:
              type: string
              description: Text with original markdown links preserved
            text:
              type: string
              description: User supplied text
        counts:
          type: object
          properties:
            bookmarks:
              type: integer
              description: Number of bookmarks saved
            clients:
              type: integer
              description: Number of public clients created
            followers:
              type: integer
              description: Number of users following this user
            following:
              type: integer
              description: Number of users this user is following
            posts:
              type: integer
              description: Number of posts created
        badge:
          type: object
          properties:
            id:
              type: string
              description: Reference ID of the badge
            name:
              type: string
              description: Common name for the badge
        created_at:
          type: string
          format: date-time
          description: ISO 8601 date when the user was created
        locale:
          type: string
          description: User's locale
        timezone:
          type: string
          description: User's timezone
        type:
          type: string
          enum: [human, feed, bot]
          description: Type of user account

    Badge:
      type: object
      properties:
        id:
          type: string
          description: Reference ID of the badge
        name:
          type: string
          description: Common name for the badge
        description:
          type: string
          description: Description of the badge

    UserBadge:
      type: object
      properties:
        id:
          type: string
          description: Reference ID of the badge
        name:
          type: string
          description: Common name for the badge
        description:
          type: string
          description: Description of the badge
        awarded_at:
          type: string
          format: date-time
          description: ISO 8601 date when the badge was awarded

    Presence:
      type: object
      properties:
        avatar_image:
          type: string
          description: URL linking to the avatar image
        id:
          type: string
          description: Primary identifier for the user
        last_seen_at:
          type: string
          format: date-time
          description: ISO 8601 date when the presence was updated
        name:
          type: string
          description: User-supplied name
        presence:
          type: string
          description: User presence status
        username:
          type: string
          description: Username of the user

    Interaction:
      type: object
      properties:
        pagination_id:
          type: string
          description: ID for pagination
        event_date:
          type: string
          format: date-time
          description: ISO 8601 date of the interaction
        action:
          type: string
          enum: [bookmark, reply, repost, follow, poll_response]
          description: Type of interaction
        objects:
          type: array
          items:
            type: object
          description: Objects involved in the interaction
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: Users who performed the interaction

    # Post schemas
    Post:
      type: object
      properties:
        id:
          type: string
          description: Primary identifier for a post. This will be an integer, but it is always expressed as a string to avoid limitations with JavaScript integers.
        created_at:
          type: string
          format: date-time
          description: The time at which the post was created in ISO 8601 format
        user:
          $ref: '#/components/schemas/User'
          description: The user that created the post
        user_id:
          type: string
          description: Primary identifier for the user who created the post
        thread_id:
          type: string
          description: The ID of the post at the root of the thread that this post is a part of
        content:
          type: object
          properties:
            text:
              type: string
              description: User supplied text of the post. Maximum length 256 characters.
            html:
              type: string
              description: Server-generated annotated HTML rendering of post text
            entities:
              type: object
              description: Rich text information for this post
        counts:
          type: object
          properties:
            bookmarks:
              type: integer
              description: The number of users who have bookmarked this post
            replies:
              type: integer
              description: The number of posts created in reply to this post
            reposts:
              type: integer
              description: The number of users who have reposted this post
            threads:
              type: integer
              description: The number of threads created in reply to this or other children of this post
        source:
          type: object
          properties:
            id:
              type: string
              description: The public client ID of the API consumer that created this post
            name:
              type: string
              description: Description of the API consumer that created this post
            url:
              type: string
              description: Link provided by the API consumer that created this post
        reply_to:
          type: string
          description: ID of the post this post is replying to
        repost_of:
          $ref: '#/components/schemas/Post'
          description: Embedded post object being reposted
        is_deleted:
          type: boolean
          description: Post is deleted
        is_nsfw:
          type: boolean
          description: User marked the post as "Not Safe For Work"
        is_revised:
          type: boolean
          description: Post has been revised
        revision:
          type: integer
          description: Revision number of the post
        raw:
          type: object
          description: The raw items attached to this object
        bookmarked_by:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: A sampled list of Users who bookmarked the post
        reposted_by:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: A sampled list of users who reposted the post
          
    ExploreStream:
      type: object
      properties:
        description:
          type: string
          description: Description of the explore stream
        slug:
          type: string
          description: Unique identifier for the explore stream
        title:
          type: string
          description: Title of the explore stream
        url:
          type: string
          description: URL to the explore stream

    # User stream objects
    UserStreamConnection:
      type: object
      properties:
        meta:
          type: object
          properties:
            stream:
              type: object
              properties:
                endpoint:
                  type: string
                  description: WebSocket endpoint
            connection_id:
              type: string
              description: Connection ID for creating subscriptions

    UserStreamSubscription:
      type: object
      properties:
        meta:
          type: object
          properties:
            more:
              type: boolean
              description: Whether there are more objects available
            max_id:
              type: string
              description: Maximum ID in the current set of objects
            min_id:
              type: string
              description: Minimum ID in the current set of objects
            subscription_id:
              type: string
              description: ID for the subscription
            code:
              type: integer
              description: HTTP status code
        data:
          type: array
          items:
            type: object
            description: Objects from the subscribed endpoint

    UserStreamEvent:
      type: object
      properties:
        data:
          oneOf:
            - type: array
              items:
                type: object
            - type: object
          description: Event data
        meta:
          type: object
          properties:
            timestamp:
              type: integer
              description: Unix timestamp of the event
            id:
              type: string
              description: ID of the event
            subscription_ids:
              type: array
              items:
                type: string
              description: IDs of subscriptions receiving this event
            channel_type:
              type: string
              description: Type of channel (for message events)
            channel_name:
              type: string
              description: Name of channel (for chat room message events)
            is_deleted:
              type: boolean
              description: Whether the object was deleted
            revision:
              type: object
              description: Revision information for updated objects

paths:
  # App Streams Endpoints
  /streams:
    get:
      summary: Get all app streams
      description: Get all app streams for the authenticated app.
      operationId: getAppStreams
      tags:
        - App Streams
      security:
        - OAuth2: [app]
      responses:
        '200':
          description: List of app streams
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create an app stream
      description: Create an app stream for the authenticated app. Can create up to five (5) app streams.
      operationId: createAppStream
      tags:
        - App Streams
      security:
        - OAuth2: [app]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - object_types
              properties:
                type:
                  type: string
                  enum: [long_poll]
                  description: The only value currently allowed is 'long_poll'
                object_types:
                  type: array
                  items:
                    type: string
                    enum: [post, bookmark, follow, mute, block, message, channel, channel_subscription, token, file, poll, user_presence, user_channel_presence, user]
                  description: List of object types to listen for
                key:
                  type: string
                  description: Optional name for the stream, instead of an automatically assigned numeric key. Alphanumeric and underscore allowed, 32 characters, unique for this app.
      responses:
        '200':
          description: Created app stream
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete all app streams
      description: Delete all app streams for the authenticated app.
      operationId: deleteAllAppStreams
      tags:
        - App Streams
      security:
        - OAuth2: [app]
      responses:
        '200':
          description: List of deleted streams
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /streams/{stream_key}:
    parameters:
      - name: stream_key
        in: path
        required: true
        schema:
          type: string
        description: Stream key to operate on
    get:
      summary: Get a specific app stream
      description: Get a specific app stream by its key.
      operationId: getAppStream
      tags:
        - App Streams
      security:
        - OAuth2: [app]
      responses:
        '200':
          description: Requested app stream
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Stream not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update an app stream
      description: Update an app stream. Note that, currently, any connected app streams will not be updated until the app disconnects and reconnects.
      operationId: updateAppStream
      tags:
        - App Streams
      security:
        - OAuth2: [app]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                object_types:
                  type: array
                  items:
                    type: string
                    enum: [post, bookmark, follow, mute, block, message, channel, channel_subscription, token, file, poll, user_presence, user_channel_presence, user]
                  description: List of object types to listen for
      responses:
        '200':
          description: Updated app stream
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Stream not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete an app stream
      description: Delete a specific app stream by its key.
      operationId: deleteAppStream
      tags:
        - App Streams
      security:
        - OAuth2: [app]
      responses:
        '200':
          description: Deleted app stream
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Stream not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Streams Endpoints
  /users/me/streams/{connection_id}:
    parameters:
      - name: connection_id
        in: path
        required: true
        schema:
          type: string
        description: Connection ID of the user stream
    delete:
      summary: Delete a user stream
      description: Delete a user stream.
      operationId: deleteUserStream
      tags:
        - User Streams
      security:
        - OAuth2: [basic]
      responses:
        '204':
          description: User stream deleted successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Stream not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/streams/{connection_id}/{subscription_id}:
    parameters:
      - name: connection_id
        in: path
        required: true
        schema:
          type: string
        description: Connection ID of the user stream
      - name: subscription_id
        in: path
        required: true
        schema:
          type: string
        description: Subscription ID to delete
    delete:
      summary: Delete a subscription for a user stream
      description: Delete a subscription for a user stream.
      operationId: deleteUserStreamSubscription
      tags:
        - User Streams
      security:
        - OAuth2: [basic]
      responses:
        '204':
          description: User stream subscription deleted successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Stream or subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Token Endpoints
  /token:
    get:
      summary: Get the current token
      description: Retrieve an object with the currently authenticated token, username, and user ID.
      operationId: getCurrentToken
      tags:
        - Token
      security:
        - OAuth2: [basic]
      responses:
        '200':
          description: Current token information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete the current token
      description: Delete the currently authenticated token.
      operationId: deleteCurrentToken
      tags:
        - Token
      security:
        - OAuth2: [basic]
      responses:
        '200':
          description: Deleted token information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Stream Marker Endpoints
  /markers:
    post:
      summary: Set stream markers
      description: Post a list of marker objects. You may update up to 10 at once.
      operationId: setStreamMarkers
      tags:
        - Stream Markers
      security:
        - OAuth2: [basic]
      parameters:
        - name: reset_read_id
          in: query
          required: false
          schema:
            type: boolean
          description: If true, resets the last_read_id to the specified id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - id
                  - name
                properties:
                  id:
                    type: string
                    description: The ID of the object in the stream you want to mark as having read most recently
                  name:
                    type: string
                    description: What marker to update for a user. E.g., the global stream is 'global', or a channel would be 'channel:{id}'
                  percentage:
                    type: integer
                    minimum: 1
                    maximum: 100
                    description: Can specify 1-100 percent of the current id has been read or positioned in a stream
      responses:
        '200':
          description: Updated stream markers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Clients Endpoints
  /users/{user_id}/clients:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
        description: ID of the user to list clients from
    get:
      summary: Get a user's clients
      description: Retrieve a list of active clients created by a user.
      operationId: getUserClients
      tags:
        - Clients
      security:
        - OAuth2: [basic]
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clients/{client_id}:
    parameters:
      - name: client_id
        in: path
        required: true
        schema:
          type: string
        description: ID of the client to retrieve
    get:
      summary: Get a client
      description: Retrieve details on a public client, by client ID.
      operationId: getClient
      tags:
        - Clients
      security:
        - OAuth2: [basic]
      responses:
        '200':
          description: Detailed client object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # OAuth Endpoints
  /oauth/access_token:
    post:
      summary: Get access token
      description: |
        Endpoint to obtain an access token using various OAuth 2.0 flows.
      operationId: getAccessToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AuthorizationCodeRequest'
                - $ref: '#/components/schemas/PasswordFlowRequest'
                - $ref: '#/components/schemas/ClientCredentialsRequest'
      responses:
        '200':
          description: Access token successfully obtained
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oauth/authenticate:
    get:
      summary: Authenticate user
      description: |
        Redirects the user to a page to authorize the client for the given scopes.
        For server-side flow, use response_type=code.
        For client-side flow, use response_type=token.
      operationId: authenticateUser
      tags:
        - Authentication
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: Client ID of the application
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
          description: URI to redirect to after authorization
        - name: scope
          in: query
          required: true
          schema:
            type: string
          description: Comma-delimited list of scopes to authorize
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code, token]
          description: Type of response expected (code for server-side, token for client-side)
        - name: token_group
          in: query
          required: false
          schema:
            type: string
          description: Optional name to group the token with (limited to 64 bytes)
        - name: simple_login
          in: query
          required: false
          schema:
            type: integer
            enum: [0, 1]
          description: If set to 1, removes navigation and extraneous links from the authorization page
      responses:
        '302':
          description: Redirect to the authorization page or to the redirect URI with code/token

  /oauth/authorize:
    get:
      summary: Authorize user (always prompts)
      description: |
        Similar to /oauth/authenticate but always prompts the user for authorization of scopes,
        even if they have already authorized them.
      operationId: authorizeUser
      tags:
        - Authentication
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: Client ID of the application
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
          description: URI to redirect to after authorization
        - name: scope
          in: query
          required: true
          schema:
            type: string
          description: Comma-delimited list of scopes to authorize
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code, token]
          description: Type of response expected (code for server-side, token for client-side)
        - name: token_group
          in: query
          required: false
          schema:
            type: string
          description: Optional name to group the token with (limited to 64 bytes)
        - name: simple_login
          in: query
          required: false
          schema:
            type: integer
            enum: [0, 1]
          description: If set to 1, removes navigation and extraneous links from the authorization page
      responses:
        '302':
          description: Redirect to the authorization page or to the redirect URI with code/token

  # User Lookup Endpoints
  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
        description: User ID or username with @ symbol of the user to retrieve
    get:
      summary: Get a user
      description: Retrieve a user object.
      operationId: getUser
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/IncludeRaw'
        - $ref: '#/components/parameters/IncludeUserRaw'
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      summary: Get multiple users
      description: Retrieve a list of specified user objects. Only retrieves the first 200 found.
      operationId: getUsers
      tags:
        - Users
      parameters:
        - name: ids
          in: query
          required: true
          schema:
            type: string
          description: Comma-separated list of user IDs or usernames with @ symbol
        - $ref: '#/components/parameters/IncludeRaw'
        - $ref: '#/components/parameters/IncludeUserRaw'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          description: One or more users not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /apps/me/users/ids:
    get:
      summary: Get app user IDs
      description: Retrieve a list of all user IDs that authorize the requesting app. It is not paginated.
      operationId: getAppUserIds
      tags:
        - Users
        - Apps
      security:
        - OAuth2: [app]
      responses:
        '200':
          description: List of user IDs
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      type: string
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /apps/me/users/tokens:
    get:
      summary: Get app user tokens
      description: Retrieve a list of all user token objects that authorize the requesting app. Not currently paginated.
      operationId: getAppUserTokens
      tags:
        - Users
        - Apps
      security:
        - OAuth2: [app]
      responses:
        '200':
          description: List of user tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      type: object
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Profile Endpoints
  /users/me:
    put:
      summary: Completely update a user
      description: Replaces the authenticated user's profile. Anything not included is removed.
      operationId: updateUser
      tags:
        - Users
      security:
        - OAuth2: [update_profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - locale
                - timezone
              properties:
                locale:
                  type: string
                  description: Valid user locale
                timezone:
                  type: string
                  description: Valid user timezone
                content:
                  type: object
                  properties:
                    text:
                      type: string
                      maxLength: 256
                      description: User profile text
                name:
                  type: string
                  maxLength: 50
                  description: User display name
                raw:
                  type: object
                  description: Embedded raw values
      responses:
        '200':
          description: Updated user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Partially update a user
      description: Updates only specified parts of the authenticated user's profile.
      operationId: partialUpdateUser
      tags:
        - Users
      security:
        - OAuth2: [update_profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                locale:
                  type: string
                  description: Valid user locale
                timezone:
                  type: string
                  description: Valid user timezone
                content:
                  type: object
                  properties:
                    text:
                      type: string
                      maxLength: 256
                      description: User profile text
                name:
                  type: string
                  maxLength: 50
                  description: User display name
                raw:
                  type: object
                  description: Embedded raw values
      responses:
        '200':
          description: Updated user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/avatar:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
        description: ID of the user whose avatar to retrieve
    get:
      summary: Get user avatar
      description: This endpoint will return an HTTP 302 redirect to the user's current avatar image.
      operationId: getUserAvatar
      tags:
        - Users
      parameters:
        - name: h
          in: query
          required: false
          schema:
            type: integer
          description: The requested height to scale the image down to
        - name: w
          in: query
          required: false
          schema:
            type: integer
          description: The requested width to scale the image down to
      responses:
        '302':
          description: Redirect to the avatar image
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/avatar:
    post:
      summary: Update user avatar
      description: Uploads a new avatar image for the authenticated user.
      operationId: updateUserAvatar
      tags:
        - Users
      security:
        - OAuth2: [update_profile]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Image file to upload
          application/json:
            schema:
              type: object
              properties:
                from_url:
                  type: string
                  format: uri
                  description: Publicly accessible URL of an image to download
      responses:
        '200':
          description: Updated user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete user avatar
      description: This endpoint will delete the existing user avatar (if not already is_default), and revert to their default personalized identicon.
      operationId: deleteUserAvatar
      tags:
        - Users
      security:
        - OAuth2: [update_profile]
      responses:
        '200':
          description: Updated user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/cover:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
        description: ID of the user whose cover to retrieve
    get:
      summary: Get user cover
      description: This endpoint will return an HTTP 302 redirect to the user's current cover image.
      operationId: getUserCover
      tags:
        - Users
      parameters:
        - name: h
          in: query
          required: false
          schema:
            type: integer
          description: The requested height to scale the image down to
        - name: w
          in: query
          required: false
          schema:
            type: integer
          description: The requested width to scale the image down to
      responses:
        '302':
          description: Redirect to the cover image
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/cover:
    post:
      summary: Update user cover
      description: Uploads a new cover image for the authenticated user.
      operationId: updateUserCover
      tags:
        - Users
      security:
        - OAuth2: [update_profile]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                cover:
                  type: string
                  format: binary
                  description: Image file to upload
          application/json:
            schema:
              type: object
              properties:
                from_url:
                  type: string
                  format: uri
                  description: Publicly accessible URL of an image to download
      responses:
        '200':
          description: Updated user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete user cover
      description: This endpoint will delete the existing user cover (if not already is_default), and revert to the default white background.
      operationId: deleteUserCover
      tags:
        - Users
      security:
        - OAuth2: [update_profile]
      responses:
        '200':
          description: Updated user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Following Endpoints
  /users/{user_id}/following:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
        description: ID of the user whose following to retrieve
    get:
      summary: Get users a user is following
      description: Retrieve a list of users the specified user is following.
      operationId: getUserFollowing
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Count'
        - $ref: '#/components/parameters/BeforeId'
        - $ref: '#/components/parameters/SinceId'
        - $ref: '#/components/parameters/IncludeRaw'
        - $ref: '#/components/parameters/IncludeUserRaw'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/followers:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
        description: ID of the user whose followers to retrieve
    get:
      summary: Get users following a user
      description: Retrieve a list of users following the specified user.
      operationId: getUserFollowers
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Count'
        - $ref: '#/components/parameters/BeforeId'
        - $ref: '#/components/parameters/SinceId'
        - $ref: '#/components/parameters/IncludeRaw'
        - $ref: '#/components/parameters/IncludeUserRaw'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/follow:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
        description: ID of the user to follow
    put:
      summary: Follow a user
      description: Follow the specified user.
      operationId: followUser
      tags:
        - Users
      security:
        - OAuth2: [follow]
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Unfollow a user
      description: Unfollow the specified user.
      operationId: unfollowUser
      tags:
        - Users
      security:
        - OAuth2: [follow]
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Blocking Endpoints
  /users/me/blocked:
    get:
      summary: Get blocked users
      description: Retrieve a list of users the authenticated user has blocked.
      operationId: getBlockedUsers
      tags:
        - Users
      security:
        - OAuth2: [block]
      parameters:
        - $ref: '#/components/parameters/Count'
        - $ref: '#/components/parameters/BeforeId'
        - $ref: '#/components/parameters/SinceId'
        - $ref: '#/components/parameters/IncludeRaw'
        - $ref: '#/components/parameters/IncludeUserRaw'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/block:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
        description: ID of the user to block
    put:
      summary: Block a user
      description: Block the specified user.
      operationId: blockUser
      tags:
        - Users
      security:
        - OAuth2: [block]
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Unblock a user
      description: Unblock the specified user.
      operationId: unblockUser
      tags:
        - Users
      security:
        - OAuth2: [block]
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Muting Endpoints
  /users/me/muted:
    get:
      summary: Get muted users
      description: Retrieve a list of users the authenticated user has muted.
      operationId: getMutedUsers
      tags:
        - Users
      security:
        - OAuth2: [mute]
      parameters:
        - $ref: '#/components/parameters/Count'
        - $ref: '#/components/parameters/BeforeId'
        - $ref: '#/components/parameters/SinceId'
        - $ref: '#/components/parameters/IncludeRaw'
        - $ref: '#/components/parameters/IncludeUserRaw'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/mute:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
        description: ID of the user to mute
    put:
      summary: Mute a user
      description: Mute the specified user.
      operationId: muteUser
      tags:
        - Users
      security:
        - OAuth2: [mute]
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Unmute a user
      description: Unmute the specified user.
      operationId: unmuteUser
      tags:
        - Users
      security:
        - OAuth2: [mute]
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Presence Endpoints
  /users/presence:
    get:
      summary: Get present users
      description: Retrieve a list of users with presence information.
      operationId: getPresentUsers
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Count'
        - $ref: '#/components/parameters/BeforeId'
        - $ref: '#/components/parameters/SinceId'
      responses:
        '200':
          description: List of user presence objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Presence'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/presence:
    get:
      summary: Get user presence
      description: Retrieve the authenticated user's presence information.
      operationId: getUserPresence
      tags:
        - Users
      security:
        - OAuth2: [presence]
      responses:
        '200':
          description: User presence object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/Presence'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update user presence
      description: Update the authenticated user's presence information.
      operationId: updateUserPresence
      tags:
        - Users
      security:
        - OAuth2: [presence]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                presence:
                  type: string
                  description: Presence status
      responses:
        '200':
          description: Updated user presence object
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/Presence'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Search Endpoints
  /users/search:
    get:
      summary: Search for users
      description: Search for users by username or name.
      operationId: searchUsers
      tags:
        - Users
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - $ref: '#/components/parameters/Count'
        - $ref: '#/components/parameters/BeforeId'
        - $ref: '#/components/parameters/SinceId'
        - $ref: '#/components/parameters/IncludeRaw'
        - $ref: '#/components/parameters/IncludeUserRaw'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/suggested:
    get:
      summary: Get suggested users
      description: Retrieve a list of suggested users to follow.
      operationId: getSuggestedUsers
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Count'
        - $ref: '#/components/parameters/IncludeRaw'
        - $ref: '#/components/parameters/IncludeUserRaw'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Badge Endpoints
  /system/badges:
    get:
      summary: Get all badges
      description: Retrieve a list of all badges in the system.
      operationId: getAllBadges
      tags:
        - Users
        - System
      responses:
        '200':
          description: List of badges
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Badge'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/badges:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
        description: ID of the user whose badges to retrieve
    get:
      summary: Get user badges
      description: Retrieve a list of badges for the specified user.
      operationId: getUserBadges
      tags:
        - Users
      responses:
        '200':
          description: List of badges
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserBadge'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Interactions Endpoint
  /users/me/interactions:
    get:
      summary: Get user interactions
      description: Retrieve a list of interactions with the authenticated user.
      operationId: getUserInteractions
      tags:
        - Users
      security:
        - OAuth2: [basic]
      parameters:
        - $ref: '#/components/parameters/Count'
        - $ref: '#/components/parameters/BeforeId'
        - $ref: '#/components/parameters/SinceId'
        - $ref: '#/components/parameters/IncludeRaw'
        - $ref: '#/components/parameters/IncludeUserRaw'
      responses:
        '200':
          description: List of interactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Interaction'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

security:
  - OAuth2: []
